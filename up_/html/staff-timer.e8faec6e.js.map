{"mappings":"AAIA,SAAAA,gBAAAC,EAAAC,G,wWAAA,IAAMC,KAAO,CACTC,UAAWC,SAASC,cAAc,uBAClCC,WAAYF,SAASC,cAAc,wBACnCE,UAAWH,SAASC,cAAc,uBAClCG,UAAWJ,SAASC,cAAc,uBAClCI,SAAUL,SAASC,cAAc,aACjCK,UAAWN,SAASC,cAAc,eAClCM,UAAWP,SAASC,cAAc,eAClCO,QAASR,SAASS,eAAe,WACjCC,QAASV,SAASC,cAAc,YAChCU,YAAaX,SAASC,cAAc,iBAWpCW,UAAW,EACXJ,QAAU,KACVK,YAAc,GAGlBC,eAqCC,W,sBArCKA,EACWC,EAAYC,G,wBACrBC,KAAKF,WAAaA,EAClBE,KAAKC,UAAYF,E,wBAGrBG,IAAA,M,MAAA,WAEI,OADoBC,KAAKC,Q,CAG7BF,IAAA,mB,MAAA,WAEI,OADmB,IAAIC,KAAKH,KAAKF,c,CAGrCI,IAAA,U,MAAA,SAAQG,G,IAACC,EAADD,EAACC,KAAKC,EAANF,EAAME,MAAMC,EAAZH,EAAYG,KAAKC,EAAjBJ,EAAiBI,KACrBb,YAAc,CACVU,OACAC,QACAC,OACAC,QAEJC,QAAQC,IAAIf,iB,EAgBnB,GAAGf,KAAKa,YAAYkB,iBAAiB,SAAS,SAACC,GAErClB,WACCmB,cAAcvB,SACdI,UAAW,GAIf,IAAMoB,EAAQ,IAAIlB,eAAe,GAAwBmB,OAArBnC,KAAKQ,UAAU4B,QAE/CtB,UAAW,EACXJ,QAAU2B,aAAY,WAGlB,IAAMC,EAAcJ,EAAMK,MAMtBC,EAHiBN,EAAMO,mBAGGH,EAExBb,EAAOiB,KAAKC,MAAMH,EAAY,OAC9Bd,EAAQgB,KAAKC,MAAMH,EAAa,MAAyB,MACzDb,EAAOe,KAAKC,MAAMH,EAAa,KAAoB,KACnDZ,EAAOc,KAAKC,MAAMH,EAAa,IAAc,KACnDN,EAAMU,QAAQ,CAACnB,OAAKC,QAAMC,OAAKC,SAE/B5B,KAAKC,UAAU4C,YAAc9B,YAAYU,KACzCzB,KAAKI,WAAWyC,YAAc9B,YAAYW,MAC1C1B,KAAKK,UAAUwC,YAAc9B,YAAYY,KACzC3B,KAAKM,UAAUuC,YAAc9B,YAAYa,OAI1C,QAMf5B,KAAKY,QAAQmB,iBAAiB,SAAS,SAACC,GACpCC,cAAcvB","sources":["src/js/staff-timer.js"],"sourcesContent":["// const CountdownTimer = {\n//     selector: document.querySelector('#timer-1'),\n//     targetDate: new Date('Jul 17, 2019'),\n//   };\nconst refs = {\n    daysTimer: document.querySelector('[data-value=\"days\"]'),\n    hoursTimer: document.querySelector('[data-value=\"hours\"]'),\n    minsTimer: document.querySelector('[data-value=\"mins\"]'),\n    secsTimer: document.querySelector('[data-value=\"secs\"]'),\n    minusBtn: document.querySelector('.js-minus'),\n    dateInput: document.querySelector('.date-input'),\n    timeInput: document.querySelector('.time-input'),\n    timerId: document.getElementById('timer-1'),\n    stopBtn: document.querySelector('.js-stop'),\n    coniformBtn: document.querySelector('.js-coniform')\n}\n\n// const isActive = false\n// refs.dateInput.addEventListener('input', (evt) => {\n//     console.log(evt);\n//     const date = refs.dateInput.value\n//     console.log(date);\n    \n// })\n\nlet isActive = false\nlet timerId = null\nlet timeOptions = {}\n\n\nclass CountdownTimer {\n    constructor( targetDate, targetTime){\n        this.targetDate = targetDate\n        this.tagetTime = targetTime\n    }\n\n    get() {\n        const currentTime = Date.now()\n        return currentTime;\n    }\n    returnTargetDate() {\n        const targetTime = new Date(this.targetDate)\n        return targetTime;\n    }\n    options({days,hours,mins,secs}){\n        timeOptions = {\n            days,\n            hours,\n            mins,\n            secs,\n        }\n        console.log(timeOptions);\n    }\n    // returnTargetTime(){\n    //     const targetTime = new Date(this.targetTime)\n    //     return targetTime;\n    // }\n    // timerDoc(){\n    //     const timerHTML = document.getElementById(`${this.selector}`)\n    //     return timerHTML;\n    // }\n\n\n}\n\n\n\n    refs.coniformBtn.addEventListener('click', (evt) => {\n    \n        if(isActive){\n            clearInterval(timerId)\n            isActive = false\n        }\n    \n    \n        const timer = new CountdownTimer(`${refs.dateInput.value}`)\n\n            isActive = true\n            timerId = setInterval(() => {\n    \n    \n                const currentDate = timer.get()\n                \n                // const optionalTime = timer.returnTargetTime()\n                const optionalDate = timer.returnTargetDate()\n        \n\n                let interval = optionalDate - currentDate \n\n                const days = Math.floor(interval / (1000 * 60 * 60 * 24));\n                const hours = Math.floor((interval % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n                const mins = Math.floor((interval % (1000 * 60 * 60)) / (1000 * 60));\n                const secs = Math.floor((interval % (1000 * 60)) / 1000);\n                timer.options({days,hours,mins,secs})\n                \n                refs.daysTimer.textContent = timeOptions.days\n                refs.hoursTimer.textContent = timeOptions.hours\n                refs.minsTimer.textContent = timeOptions.mins\n                refs.secsTimer.textContent = timeOptions.secs\n            \n    \n               \n            }, 1000)\n    \n    \n    })\n    \n    \nrefs.stopBtn.addEventListener('click', (evt) => {\n    clearInterval(timerId)\n})"],"names":["_classCallCheck","instance","Constructor","refs","daysTimer","document","querySelector","hoursTimer","minsTimer","secsTimer","minusBtn","dateInput","timeInput","timerId","getElementById","stopBtn","coniformBtn","isActive","timeOptions","CountdownTimer","targetDate","targetTime","this","tagetTime","key","Date","now","param","days","hours","mins","secs","console","log","addEventListener","evt","clearInterval","timer","concat","value","setInterval","currentDate","get","interval","returnTargetDate","Math","floor","options","textContent"],"version":3,"file":"staff-timer.e8faec6e.js.map"}