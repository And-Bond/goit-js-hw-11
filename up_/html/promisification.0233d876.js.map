{"mappings":"AAEA,SAAAA,gBAAAC,EAAAC,EAAAC,G,wcAAA,IAAMC,MAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAACC,EAASC,GACnCC,YAAW,WACZF,EAAQF,KACPA,OAKLD,MAAM,KAAMM,MAAK,SAACL,GAChBM,QAAQC,IAAI,aAAgBC,OAAHR,EAAG,WAK9B,IAAMS,MAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,gBAAkB,SAACC,EAAUC,GAQjC,OAPgB,IAAIb,SAAS,SAACC,EAASC,GAIjCD,EAHiBW,EAASE,KAAI,SAAAC,G,OAC5BA,EAAKN,OAASI,EAAWG,cAAA,GAAKD,EAAI,CAAEL,QAASK,EAAKL,SAAWK,UAQjEE,OAAS,SAAAC,G,OAAgBb,QAAQC,IAAIY,IAE3CP,gBAAgBH,MAAO,SAASJ,KAAKa,QAIrC,IAAME,0BAA4B,SAACC,EAAKC,GACtC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,gBAAkB,SAACC,GAEvB,IAAMC,EAAQR,0BAA0B,IAAK,KAe7C,OAbgB,IAAInB,SAAQ,SAACC,EAAQC,GAEnCC,YAAW,WACUmB,KAAKE,SAAW,GAGjCvB,EAAQ,CAAE2B,GAAKF,EAAYE,GAAI9B,MAAO6B,IAEtCzB,EAAOwB,EAAYE,MAEpBD,OAODE,WAAa,SAAAC,G,IAAEF,EAAEE,EAAFF,GAAIG,EAAKD,EAALhC,MACvBO,QAAQC,IAAI,eAAkCC,OAAnBqB,EAAG,kBAAsBrB,OAANwB,EAAM,SAGhDC,SAAW,SAAAJ,GACfvB,QAAQ4B,KAAK,gCAAmC1B,OAAHqB,EAAG,+BAGlDH,gBAAgB,CAAEG,GAAI,GAAIM,OAAQ,MAC/B9B,KAAKyB,YACLM,MAAMH","sources":["src/js/promisification.js"],"sourcesContent":["// 1 Homework\n\nconst delay = ms => {\n  const promise = new Promise((resolve, reject) => {\n     setTimeout(() => {\n    resolve(ms)\n  }, ms)\n  })\n  return promise;\n}\n\ndelay(1000).then((ms) => {\n  console.log(`timeout = ${ms} ms`);\n})\n\n// 2 Homework\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const promise = new Promise( (resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n          user.name === userName ? { ...user, active: !user.active } : user,\n        );\n        resolve(updatedUsers)\n    }\n  )\n  return promise\n}\n\nconst logger = updatedUsers => console.log(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger)\n\n// 3 Homework\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n\n  const delay = randomIntegerFromInterval(200, 500);\n\n  const promise = new Promise((resolve,reject) => {\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id : transaction.id, delay: delay});\n      } else {\n        reject(transaction.id);\n      }\n    }, delay)\n      \n     })\n  return promise;\n    \n};\n\nconst logSuccess = ({id, delay}) => {\n  console.log(`Transaction ${id} processed in ${delay} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n"],"names":["_defineProperty","obj","key","value","delay","ms","Promise","resolve","reject","setTimeout","then","console","log","concat","users","name","active","toggleUserState","allUsers","userName","map","user","_objectSpread","logger","updatedUsers","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay1","id","logSuccess","param","delay2","logError","warn","amount","catch"],"version":3,"file":"promisification.0233d876.js.map"}